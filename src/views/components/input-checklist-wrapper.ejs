<div class="field">
  <%- include('./form-input') %>
  <div class="onfocus-message" style="display: none;" id=<%= name + '-onfocus' %>>
    <% conditionMessages.forEach((condition, index) => {%>
      <p class="condition" id=<%= 'condition-' + name + '-' + index %>>
        <%# the "id" of each condition takes the format "condition-password-1", "condition-password-2", etc, with numbers going up per condition for the same field. each condition needs this kind of id to be accessed in the script below, corresponding to each condition's function expression. %>
        <span class="correct" style="display: none;">
          <%- include('../svg/success.svg') %>
        </span>
        <span class="incorrect" style="display: none;">
          <%- include('../svg/warning.svg') %>
        </span>
        <%= condition %>
      </p>
    <% }) %>
  </div>
</div>

<script defer nonce="<%= locals.nonce %>">
  <%# // holds a reference to the input element of the current field %>
  const inputFor_<%= name %> = document.getElementById('<%= name %>')

  <%# // reference to the element containing the condition descriptions for the current field %>
  const messageContainerFor_<%= name %> = document.getElementById('<%= name + "-onfocus" %>')

  <%# // updates the condition descriptions for the current field %>
  const doCheckFor_<%= name %> = (value) => {
    [<%- conditionFunctions %>].forEach((check, index) => {
      const valid = check(value)
      <%# // i need to access the "condition-password-0", "condition-password-1", etc ids. %>
      <%# // i can't dynamically name a variable! but i CAN dynamically name an object. %>
      const messageText = {}
      <%# // save the getElementById result instead of querying it again %>
      messageText['condition-' + '<%= name %>' + '-' + index] = document.getElementById(
        'condition-' + '<%= name %>' + '-' + index
      )
      <%# // and now, conditionally render the visibility of each condition's checkmark based on 'valid' %>
      messageText['condition-' + '<%= name %>' + '-' + index].querySelector('.incorrect').style
        .display = valid ? 'none' : 'inline'
      messageText['condition-' + '<%= name %>' + '-' + index].querySelector('.correct').style
        .display = valid ? 'inline' : 'none'
    })
  }

  <%# // add listener to the field's corresponding input to run the check against its value on change %>
  inputFor_<%= name %>.addEventListener('input', e => {
    doCheckFor_<%= name %>(e.target.value)
  })
  
  if (inputFor_<%= name %>.value !== '') {
    <%# // for ux, if the field is prefilled and this is a rejected submission, %>
    <%# // don't wait until focus for the condition list to show up. have it show up and check on load %>
    messageContainerFor_<%= name %>.style.display = 'block'
    doCheckFor_<%= name %>(inputFor_<%= name %>.value)
  } else {
    <%# // add listener to untouched fields to render the condition list when touched %>
    inputFor_<%= name %>.addEventListener('focus', (e) => {
      doCheckFor_<%= name %>(e.target.value)
      messageContainerFor_<%= name %>.style.display = 'block'
    })
  }
  
</script>