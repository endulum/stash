generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id          Int           @id @default(autoincrement())
  username    String        @unique @db.VarChar(32)
  password    String?       @db.VarChar(255)
  githubUser  String?       @db.VarChar(255)
  githubId    Int?
  role        Role          @default(BASIC)
  files       File[]        @relation("authorFiles")
  directories Directory[]   @relation("authorDirectories")
  settings    UserSettings?
}

model UserSettings {
  id                 Int           @id @default(autoincrement())
  sortFiles          FileSort      @default(name)
  sortFilesDirection FileSortOrder @default(asc)
  sortDirs           DirSort       @default(name)
  sortDirsDirection  DirSortOrder  @default(asc)
  user               User          @relation(fields: [userId], references: [id])
  userId             Int           @unique
}

enum FileSort {
  name
  size
  type
  created
  updated
}

enum FileSortOrder {
  asc
  desc
}

enum DirSort {
  name
  created
  updated
}

enum DirSortOrder {
  asc
  desc
}

model Directory {
  id          String      @id @default(nanoid(6))
  name        String
  created     DateTime    @default(now())
  updated     DateTime?
  shareUntil  DateTime?
  files       File[]      @relation("directoryFiles")
  directories Directory[] @relation("parentDirectory")
  parent      Directory?  @relation("parentDirectory", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  author      User        @relation("authorDirectories", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
}

model File {
  id          String     @id @default(nanoid(6))
  name        String
  ext         String?
  type        String
  size        Float
  supabaseUrl String?
  created     DateTime   @default(now())
  updated     DateTime?
  directory   Directory? @relation("directoryFiles", fields: [directoryId], references: [id], onDelete: Cascade)
  directoryId String?
  author      User       @relation("authorFiles", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
}

enum Role {
  BASIC
  ADMIN
}
